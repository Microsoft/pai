openapi: 3.0.1
info:
  title: OpenPAI RESTful API
  description: Open Platform for AI RESTful API docs.
  license:
    name: MIT License
    url: 'https://github.com/microsoft/pai/blob/master/LICENSE'
  version: 0.16.0
externalDocs:
  description: Find out more about OpenPAI
  url: 'https://github.com/microsoft/pai'
tags:
  - name: api
    description: API information
  - name: token
    description: API endpoint for token
  - name: authn
    description: Authentication
  - name: user
    description: API endpoint for user
  - name: group
    description: API endpoint for group
  - name: virtual cluster
    description: API endpoint for virtual cluster
  - name: job
    description: API endpoint for job
  - name: storage
    description: API endpoint for storage
  - name: job history
    description: API endpoint for job history
  - name: kubernetes
    description: API endpoint for kubernetes info
paths:
  /api/v2/info:
    get:
      tags:
        - api
      summary: Get OpenPAI cluster info.
      description: Get OpenPAI cluster info.
      operationId: getApiV2
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: PAI RESTfulAPI
                  version:
                    type: string
                    description: cluster version in v0.X.0 format
                  launcherType:
                    type: string
                    enum:
                      - yarn
                      - k8s
                  authnMethod:
                    type: string
                    enum:
                      - basic
                      - OIDC
                required:
                  - name
                  - version
                  - launcherType
                  - authnMethod
  /api/v2/token:
    get:
      tags:
        - token
      summary: Get your currently signed tokens.
      description: Get your currently signed tokens.
      operationId: getToken
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokens:
                    type: array
                    items:
                      type: string
                    description: JWT string list
                required:
                  - tokens
        '401':
          $ref: '#/components/responses/UnauthorizedUserError'
  '/api/v2/token/{token}':
    delete:
      tags:
        - token
      summary: Revoke a token.
      description: Revoke a token.
      operationId: deleteToken
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/token'
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                message: revoke successfully
        '401':
          $ref: '#/components/responses/UnauthorizedUserError'
        '403':
          $ref: '#/components/responses/ForbiddenUserError'
  /api/v2/token/application:
    post:
      tags:
        - token
      summary: Create an application access token in the system.
      description: >
        Application access token can only be used for job related operations.
        Application access token has no expiration time and can be revoked
        manually.
      operationId: createApplicationToken
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: your access token
                  application:
                    type: boolean
                    description: 'true'
        '401':
          $ref: '#/components/responses/UnauthorizedUserError'
  /api/v2/authn/oidc/login:
    get:
      tags:
      - authn
      summary: User login with Azure AD.
      description: After call this API in web browser, restserver will redirect your page to Azure AD for authentication. Only be used in webportal.
      operationID: oidcLogin
      responses:
        302:
          description: Redirect
  /api/v2/authn/oidc/logout:
    get:
      tags:
        - authn
      summary: User logout from Azure AD.
      description: After call this API in web browser, restserver will redirect your page to Azure AD for logout.
      operationID: oidcLogout
      responses:
        302:
          description: Redirect
  /api/v2/basic/login:
    get:
      tags:
        - authn
      summary: Get an access token using username and password.
      description: >-
        Authenticated and get an access token in the system (basic
        authentication mode only).
      operationId: basicLogin
      requestBody:
        description: Basic authentication.
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: your username
                password:
                  type: string
                  description: your password
                expiration:
                  type: integer
                  description: expiration time in seconds
              required:
                - username
                - password
        required: true
      responses:
        200:
          description: Succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: your access token
                  user:
                    type: string
                    description: username
                  admin:
                    type: boolean
                    description: true if user is admin
                required:
                  - token
                  - user
                  - admin
        '400':
          description: NoUserError or IncorrectPassworkError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        404:
          $ref: '#/components/responses/NoUserError'
  /api/v2/user:
    post:
      tags:
        - user
      summary: Create a user in the system.
      description: 'Create a user in the system by admin, basic authentication mode only.'
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        description: User account
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'username in [\w.-]+ format'
                password:
                  type: string
                  description: password at least 6 characters
                admin:
                  type: boolean
                email:
                  type: string
                  description: email address or empty string
                virtualCluster:
                  type: array
                  items:
                    type: string
                  description: vc list
                extension:
                  type: object
              required:
                - username
                - password
        required: true
      responses:
        '201':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                message: User is created successfully
        '401':
          $ref: '#/components/responses/UnauthorizedUserError'
        '403':
          $ref: '#/components/responses/ForbiddenUserError'
        '409':
          $ref: '#/components/responses/ConflictUserError'
        '500':
          $ref: '#/components/responses/UnknownError'
  '/api/v2/user/{user}':
    parameters:
      - $ref: '#/components/parameters/user'
    get:
      tags:
        - user
      summary: FIXME
      responses:
        '200':
          description: Succeeded
          content: {}
    post:
      tags:
        - user
      summary: FIXME
      responses:
        '200':
          description: Succeeded
          content: {}
    put:
      tags:
        - user
      summary: FIXME
      responses:
        '200':
          description: Succeeded
          content: {}
    delete:
      tags:
        - user
      summary: Remove a user in the system.
      description: 'Remove a user in the system. by admin, basic authentication mode only.'
      operationId: deleteUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                message: user is removed successfully
        '401':
          $ref: '#/components/responses/UnauthorizedUserError'
        '403':
          $ref: '#/components/responses/ForbiddenUserError'
        '404':
          $ref: '#/components/responses/NoUserError'
        '500':
          $ref: '#/components/responses/UnknownError'
  '/api/v2/user/{user}/group/{group}':
    parameters:
      - $ref: '#/components/parameters/user'
      - $ref: '#/components/parameters/group'
    put:
      tags:
        - user
        - group
      summary: Add a group for user.
      description: Administrator add a group to other user's grouplist.
      operationId: updateUserGroup
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                message: 'User {user} is added into group {group}'
        '401':
          $ref: '#/components/responses/UnauthorizedUserError'
        '403':
          $ref: '#/components/responses/ForbiddenUserError'
        '404':
          $ref: '#/components/responses/NoUserError'
    delete:
      tags:
        - user
      summary: Remove a group from user's grouplist.
      description: >-
        Administrator remove a group from other user's grouplist, basic
        authentication mode only.
      operationId: deleteUserGroup
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                message: 'User {user} is removed from group {group}'
        '401':
          $ref: '#/components/responses/UnauthorizedUserError'
        '403':
          $ref: '#/components/responses/ForbiddenUserError'
        '404':
          $ref: '#/components/responses/NoUserError'
  /api/v2/group:
    get:
      tags:
        - group
      summary: FIXME
      responses:
        '200':
          description: Succeeded
          content: {}
    post:
      tags:
        - group
      summary: Create a group in the system.
      description: Create a group in the system by admin.
      operationId: createGroup
      security:
        - bearerAuth: []
      requestBody:
        description: Group
        content:
          application/json:
            schema:
              type: object
              properties:
                groupname:
                  type: string
                  description: group name
                description:
                  type: string
                  description: description for the group
                externalName:
                  type: string
                  description: the external group name binding with the group in OpenPAI
                extension:
                  type: object
              required:
                - groupname
                - externalName
        required: true
      responses:
        '201':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                message: group is created successfully
        '401':
          $ref: '#/components/responses/UnauthorizedUserError'
        '403':
          $ref: '#/components/responses/ForbiddenUserError'
        '500':
          $ref: '#/components/responses/UnknownError'
  '/api/v2/group/{group}':
    parameters:
      - $ref: '#/components/parameters/group'
    get:
      tags:
        - group
      summary: FIXME
      responses:
        '200':
          description: Succeeded
          content: {}
    put:
      tags:
        - group
      summary: FIXME
      responses:
        '200':
          description: Succeeded
          content: {}
    delete:
      tags:
        - group
      summary: Deelete a group in the system.
      description: Delete a group in the system by admin.
      operationId: deleteGroup
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                message: group is removed successfully
        '401':
          $ref: '#/components/responses/UnauthorizedUserError'
        '403':
          $ref: '#/components/responses/ForbiddenUserError'
        '500':
          $ref: '#/components/responses/UnknownError'
  '/api/v2/group/{group}/userlist':
    parameters:
      - $ref: '#/components/parameters/group'
    get:
      tags:
        - group
      summary: FIXME
      responses:
        '200':
          description: Succeeded
          content: {}
  /api/v2/virtual-clusters:
    get:
      tags:
        - virtual cluster
      summary: Get the list of virtual clusters.
      description: Get the list of virtual clusters.
      operationId: getVirtualClusters
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/UnknownError'
  '/api/v2/virtual-clusters/{vc}':
    get:
      tags:
        - virtual cluster
      summary: Get virtual cluster status in the system.
      description: Get virtual cluster status in the system.
      operationId: getVirtualCluster
      parameters:
        - $ref: '#/components/parameters/vc'
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualCluster'
        '404':
          $ref: '#/components/responses/NoVirtualClusterError'
        '500':
          $ref: '#/components/responses/UnknownError'
  '/api/v2/virtual-clusters/{vc}/sku-types':
    parameters:
      - $ref: '#/components/parameters/vc'
    get:
      tags:
        - virtual cluster
      summary: FIXME
      responses:
        '200':
          description: Succeeded
          content: {}
  /api/v2/storages:
    get:
      tags:
        - storage
      summary: Get storage list (persistent volume claims) for current user.
      description: Get storage list for which current user has permissions.
      operationId: getStorages
      security:
        - bearerAuth: []
      parameters:
        - name: default
          in: query
          description: Return default storage or not.
          schema:
            type: boolean
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageSummary'
        '500':
          $ref: '#/components/responses/UnknownError'
  '/api/v2/storages/{storage}':
    get:
      tags:
        - storage
      summary: Get storage (persistent volume claim) for the given name.
      description: Get storage for the given name.
      operationId: getStorage
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/storage'
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageDetail'
        '403':
          description: ForbiddenUserError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                ForbiddenUserError:
                  value:
                    code: ForbiddenUserError
                    message: 'User {user} is not allowed to access {storage}.'
        '404':
          $ref: '#/components/responses/NoStorageError'
        '500':
          $ref: '#/components/responses/UnknownError'
  /api/v2/jobs:
    post:
      tags:
        - job
      summary: Submit a job v2 in the system.
      description: Submit a job v2 in the system.
      operationId: v2createJob
      security:
        - bearerAuth: []
      requestBody:
        description: Job protocol
        content:
          text/yaml:
            schema:
              $ref: '#/components/schemas/JobProtocol'
        required: true
      responses:
        '202':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              example:
                message: 'update job {job} successfully'
        '400':
          $ref: '#/components/responses/NoVirtualClusterError'
        '403':
          $ref: '#/components/responses/ForbiddenUserError'
        '409':
          $ref: '#/components/responses/ConflictJobError'
        '500':
          $ref: '#/components/responses/UnknownError'
    get:
      tags:
        - job
      summary: FIXME
      parameters:
        - name: user
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Succeeded
          content: {}
  '/api/v2/jobs/{user}~{job}':
    get:
      tags:
        - job
      summary: Get job status.
      description: Get job status.
      operationId: getJobByUser
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/job'
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetail'
        '404':
          $ref: '#/components/responses/NoJobError'
        '500':
          $ref: '#/components/responses/UnknownError'
  '/api/v2/jobs/{user}~{job}/config':
    get:
      tags:
        - job
      summary: FIXME
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/job'
      responses:
        '200':
          description: Succeeded
          content: {}
  '/api/v2/jobs/{user}~{job}/exectionType':
    put:
      tags:
        - job
      summary: FIXME
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/job'
      responses:
        '200':
          description: Succeeded
          content: {}
  '/api/v2/jobs/{user}~{job}/job-attempts/healthz':
    get:
      tags:
        - job history
      summary: Check if job attempts is healthy.
      description: Check if job attempts is healthy.
      operationId: getJobAttemptsHealthz
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/job'
      responses:
        '200':
          description: OK
        '501':
          description: Not healthy
  '/api/v2/jobs/{user}~{job}/job-attempts':
    get:
      tags:
        - job history
      summary: Get all attempts of a job.
      description: Get all attempts of a job.
      operationId: getJobAttempts
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/job'
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobAttempt'
                description: job attempts
        '404':
          $ref: '#/components/responses/NoJobError'
        '501':
          $ref: '#/components/responses/UnknownError'
  '/api/v2/jobs/{user}~{job}/job-attempts/{attempt}':
    get:
      tags:
        - job history
      summary: Get a specific attempt by attempt index.
      description: Get a specific attempt by attempt index.
      operationId: getJobAttempt
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/job'
        - $ref: '#/components/parameters/attempt'
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAttempt'
        '404':
          $ref: '#/components/responses/NoJobError'
        '501':
          $ref: '#/components/responses/UnknownError'
  /api/v2/kubernetes/nodes:
    get:
      tags:
        - kubernetes
      summary: Get kubernetes node list.
      description: Get kubernetes node list. Need administrator permission.
      operationId: getK8sNodes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              example:
                - Please refer to Kubernetes API doc
                - >-
                  https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#list-node-v1-core
        '401':
          $ref: '#/components/responses/UnauthorizedUserError'
        '403':
          $ref: '#/components/responses/ForbiddenUserError'
  /api/v2/kubernetes/pods:
    get:
      tags:
        - kubernetes
      summary: Get kubernetes pod list.
      description: Get kubernetes pod list. Need administrator permission.
      operationId: getK8sPods
      parameters:
        - name: namespace
          in: query
          description: filter pods with namespace
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              example:
                - Please refer to Kubernetes API doc
                - >-
                  https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#list-all-namespaces-pod-v1-core
        '401':
          $ref: '#/components/responses/UnauthorizedUserError'
        '403':
          $ref: '#/components/responses/ForbiddenUserError'
components:
  parameters:
    token:
      name: token
      in: path
      description: token
      required: true
      schema:
        type: string
      example: test-token
    user:
      name: user
      in: path
      description: user name
      required: true
      schema:
        type: string
      example: test-user
    group:
      name: group
      in: path
      description: group name
      required: true
      schema:
        type: string
      example: test-group
    vc:
      name: vc
      in: path
      description: virtual cluster name
      required: true
      schema:
        type: string
      example: test-vc
    job:
      name: job
      in: path
      description: job name
      required: true
      schema:
        type: string
    framework:
      name: framework
      in: path
      description: 'framework name defined by {user}~{job}'
      required: true
      schema:
        type: string
    storage:
      name: storage
      in: path
      description: storage name
      required: true
      schema:
        type: string
    attempt:
      name: attempt
      in: path
      description: attempt index
      required: true
      schema:
        type: string
  schemas:
    Response:
      type: object
      properties:
        code:
          type: string
          enum:
            - BadConfigurationError
            - ConflictJobError
            - ConflictUserError
            - ConflictVcError
            - ForbiddenUserError
            - ForbiddenKeyError
            - IncorrectPasswordError
            - InvalidParametersError
            - NoApiError
            - NoJobError
            - NoJobConfigError
            - NoJobSshInfoError
            - NoUserError
            - NoGroupError
            - NoVirtualClusterError
            - ReadOnlyJobError
            - RemoveAdminError
            - ReadOnlyVcError
            - RemoveRunningVcError
            - UnauthorizedUserError
            - NoEnoughQuotaError
            - NotImplementedError
            - UnknownError
        message:
          type: string
      required:
        - message
    JobConfig:
      type: object
      description: TODO
      properties: {}
    JobProtocol:
      type: object
      description: TODO
    JobSummary:
      type: object
      properties:
        name:
          type: string
          description: job name
      description: TODO
    JobDetail:
      type: object
      properties:
        name:
          type: string
          description: job name
        jobStatus:
          type: object
          properties:
            createdTime:
              type: integer
              description: >-
                job created time, in number of milliseconds since the Unix
                Epoch.
            completedTime:
              type: integer
              description: >-
                job completed time, in number of milliseconds since the Unix
                Epoch.
            appLaunchedTime:
              type: integer
              description: >-
                job launched time for last attempt, in number of milliseconds
                since the Unix Epoch.
            appCompletedTime:
              type: integer
              description: >
                job completed time for last attempt, in number of milliseconds
                since the Unix Epoch. to get durations for last attempt:
                  wholeDuration = completedTime - createdTime;
                  runningDuration = appCompletedTime - appLaunchedTime;
                  waitingDuration = wholeDuration - runningDuration.
                to get durations for all attempts:
                  runningDuration = sum(appCompletedTime - appLaunchedTime) for all attempts.
        taskRoles:
          type: object
      description: TODO
    VirtualCluster:
      type: object
      properties:
        capacity:
          type: integer
          description: capacity percentage this virtual cluster can use of entire cluster
        maxCapacity:
          type: integer
          description: >-
            max capacity percentage this virtual cluster can use of entire
            cluster
        usedCapacity:
          type: integer
          description: >-
            used capacity percentage this virtual cluster can use of entire
            cluster
        numActiveJobs:
          type: integer
        numJobs:
          type: integer
        numPendingJobs:
          type: integer
        resourcesUsed:
          type: object
        resourcesTotal:
          type: object
        dedicated:
          type: boolean
        nodeList:
          type: array
          items:
            type: string
        status:
          type: string
          enum:
            - RUNNING
            - STOPPED
            - DRAINING
          description: >-
            RUNNING -> vc is enabled, STOPPED -> vc is disabled, without either
            new job or running job, DRAINING -> intermedia state from RUNNING to
            STOPPED, in waiting on existing job.
    StorageSummary:
      type: object
      properties:
        storages:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              share:
                type: boolean
              volumeName:
                type: string
            required:
              - name
              - share
              - volumeName
      required:
        - storages
    StorageDetail:
      type: object
      properties:
        name:
          type: string
        share:
          type: boolean
        volumeName:
          type: string
        type:
          type: string
          enum:
            - nfs
            - samba
            - azureFile
            - azureBlob
            - other
            - unknown
        data:
          oneOf:
            - type: object
              description: nfs type
              properties:
                server:
                  type: string
                path:
                  type: string
              required:
                - server
                - path
            - type: object
              description: samba type
              properties:
                address:
                  type: string
                username:
                  type: string
                password:
                  type: string
              required:
                - address
            - type: object
              description: azureFile type
              properties:
                shareName:
                  type: string
                accountName:
                  type: string
                accountKey:
                  type: string
              required:
                - shareName
            - type: object
              description: azureBlob type
              properties:
                containerName:
                  type: string
                accountName:
                  type: string
                accountKey:
                  type: string
                accountSASToken:
                  type: string
              required:
                - containerName
            - type: object
              description: other/unknown type
              properties: {}
        secretName:
          type: string
        mountOptions:
          type: array
          items:
            type: string
      required:
        - name
        - share
        - volumeName
        - type
        - data
    JobAttempt:
      type: object
      description: TODO
  responses:
    IncorrectPassworkError:
      description: IncorrectPassworkError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            IncorrectPassworkError:
              value:
                code: IncorrectPassworkError
                message: Password is incorrect.
    NoVirtualClusterError:
      description: NoVirtualClusterError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            NoVirtualClusterError:
              value:
                code: NoVirtualClusterError
                message: 'Virtual cluster {vc} is not found.'
    NoStorageError:
      description: NoStorageError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            NoVirtualClusterError:
              value:
                code: NoStorageError
                message: 'Storage {storage} is not found.'
    UnauthorizedUserError:
      description: UnauthorizedUserError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            UnauthorizedUserError:
              value:
                code: UnauthorizedUserError
                message: Guest is not allowed to do this operation.
    ForbiddenUserError:
      description: ForbiddenUserError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            ForbiddenUserError:
              value:
                code: ForbiddenUserError
                message: Non-admin is not allow to do this operation.
    ForbiddenKeyError:
      description: ForbiddenKeyError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            ForbiddenKeyError:
              value:
                code: ForbiddenKeyError
                message: Key empty is system reserved and should not be modified!
    NoUserError:
      description: NoUserError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            NoUserError:
              value:
                code: NoUserError
                message: 'User {user} is not found.'
    NoJobError:
      description: NoJobError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            NoJobError:
              value:
                code: NoJobError
                message: 'Job {job} is not found.'
    NoJobConfigError:
      description: NoJobConfigError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            NoJobConfigError:
              value:
                code: NoJobConfigError
                message: 'Config of job {job} is not found.'
    NoJobSshInfoError:
      description: NoJobSshInfoError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            NoJobSshInfoError:
              value:
                code: NoJobSshInfoError
                message: 'SSH info of job {job} is not found.'
    ConflictUserError:
      description: ConflictUserError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            ConflictUserError:
              value:
                code: ConflictUserError
                message: 'User name {user} already exists.'
    ConflictJobError:
      description: ConflictJobError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            ConflictJobError:
              value:
                code: ConflictJobError
                message: 'Job name {job} already exists.'
    UnknownError:
      description: UnknownError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            UnknownError:
              value:
                code: UnknownError
                message: Internal error message.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
