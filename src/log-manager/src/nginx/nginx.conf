# Copyright (c) Microsoft Corporation
# All rights reserved.
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
# to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

server {
  listen      80;
  server_name localhost;
  client_max_body_size 0; # Disable checking of client request body size.
  client_body_buffer_size 256M;
  proxy_connect_timeout 60m;
  proxy_send_timeout 60m;
  proxy_read_timeout 60m;
  send_timeout 60m;

  #
  # Health check
  #
  location = /healthz {
    default_type text/plain;
    return 200 "Log manager ready.";
  }

  # 
  # Get all logs
  #
  location /log-manager {
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
    default_type text/plain;
    alias /usr/local/pai/logs;
    autoindex on;
    autoindex_exact_size off;
    autoindex_localtime on;
  }

  #
  # Get the token
  #
  location /log-manager/tokens {
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods 'POST';
    default_type 'application/json';
    content_by_lua_block{
      local cjson = require "cjson"
      local jwt = require "resty.jwt"

      local method = ngx.req.get_method()
      if method ~= "POST" then
         ngx.status = ngx.HTTP_FORBIDDEN
         return ngx.exit(ngx.HTTP_FORBIDDEN)
      end

      -- check username & password
      local admin_name = os.getenv("ADMIN_NAME")
      local admin_password = os.getenv("ADMIN_PASSWORD")
      ngx.req.read_body()
      local ok, body = pcall(cjson.decode, ngx.req.get_body_data())

      if not ok then
        ngx.status = ngx.HTTP_BAD_REQUEST
        return ngx.exit(ngx.HTTP_BAD_REQUEST)
      end

      if body["username"] ~= admin_name or body["password"] ~= admin_password then
        ngx.status = ngx.HTTP_UNAUTHORIZED
        return ngx.exit(ngx.HTTP_UNAUTHORIZED)
      end

      -- sign jwt token
      local jwt_secret = os.getenv("JWT_SECRET")
      local jwt_token = jwt:sign(
        jwt_secret,
        {
            header={typ="JWT", alg="HS256"},
            payload={sub="log-manager", iat=os.time(), exp=os.time()+120}
        }
      )
      ngx.say(cjson.encode({token=jwt_token}))
    }
  }

  #
  # Get full/tailed log
  #
  location ~ ^/log-manager/(full|tail)/(.*)$ {
  add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
    default_type text/plain;
    content_by_lua_block{
      # local cjson = require "cjson"
      # local jwt = require "resty.jwt"

      # local jwt_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9" ..
      #   ".eyJmb28iOiJiYXIifQ" ..
      #   ".VAoRL1IU0nOguxURF2ZcKR0SGKE1gCbqwyh8u2MLAyY"
      # local jwt_obj = jwt:verify("lua-resty-jwt", jwt_token)
      # ngx.say(cjson.encode(jwt_obj))

      logpath = "/usr/local/pai/logs/"..ngx.var[2]
      errcheck = " || echo No such file!"
      if (ngx.var[1] == "tail")
      then
        logs = io.popen("tail -c 16k "..logpath..errcheck)
      elseif (ngx.var[1] == "full")
      then
        logs = io.popen("cat "..logpath..errcheck)
      end
      for line in logs:lines() do
        ngx.say(line)
      end
    }
  }

  #
  # Get compressed logs for old job
  #
  location /log-backup {
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
    default_type text/plain;
    alias /usr/local/pai/logs-backup;
    autoindex on;
    autoindex_exact_size off;
    autoindex_localtime on;
  }
}
